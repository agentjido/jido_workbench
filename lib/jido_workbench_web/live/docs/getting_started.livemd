---
title: "Getting Started with Jido"
description: "Learn how to install and use the Jido framework for autonomous agents"
category: "Basic"
icon: "hero-rocket-launch"
tags: ["introduction", "setup", "quickstart"]
order: 1
---

# Getting Started with Jido

Welcome to Jido, the Elixir Autonomous Agent Framework! This guide will help you get up and running quickly with creating your first autonomous agent.

## What is Jido?

Jido is a framework for building autonomous, distributed agent systems in Elixir. It leverages Elixir's powerful concurrency model and OTP to create resilient, adaptable agents that can work independently or collaboratively.

## Installation

### Prerequisites

- Elixir 1.14 or later
- Erlang/OTP 25 or later
- A working Phoenix setup (if building web interfaces)

### Adding to Your Project

Add Jido to your dependencies in `mix.exs`:

```elixir
def deps do
  [
    {:jido, "~> 1.0"}
  ]
end
```

Then run:

```bash
mix deps.get
```

### Creating a New Jido Project

For a fresh start, you can use our project template:

```bash
mix archive.install hex jido_new
mix jido.new my_agent_app
cd my_agent_app
```

## Your First Agent

Let's create a simple agent that can respond to messages:

```elixir
defmodule MyApp.GreeterAgent do
  use Jido.Agent

  @impl true
  def init(_opts) do
    {:ok, %{greetings_count: 0}}
  end

  @impl true
  def handle_message("hello", state) do
    new_count = state.greetings_count + 1

    response = "Hello there! I've been greeted #{new_count} times."

    {:reply, response, %{state | greetings_count: new_count}}
  end

  @impl true
  def handle_message(message, state) do
    {:reply, "You said: #{message}. I don't understand that command.", state}
  end
end
```

Start your agent in your application's supervision tree:

```elixir
# In lib/my_app/application.ex
def start(_type, _args) do
  children = [
    # ...other children
    {MyApp.GreeterAgent, name: MyApp.GreeterAgent}
  ]

  opts = [strategy: :one_for_one, name: MyApp.Supervisor]
  Supervisor.start_link(children, opts)
end
```

## Core Concepts

### Agents

Agents are the primary building blocks in Jido. They:

- Maintain state
- Process messages
- Execute actions
- Use skills
- Respond to sensor data

### Actions

Actions represent capabilities that agents can perform in their environment:

```elixir
defmodule MyApp.SendEmailAction do
  use Jido.Action

  @impl true
  def execute(params, _context) do
    # Logic to send an email
    {:ok, %{sent_to: params.recipient}}
  end
end
```

### Skills

Skills are reusable capabilities that can be composed and shared between agents:

```elixir
defmodule MyApp.WeatherSkill do
  use Jido.Skill

  @impl true
  def perform("get_forecast", %{location: location}, _context) do
    # Get weather forecast logic
    {:ok, %{forecast: "Sunny", location: location}}
  end
end
```

### Sensors

Sensors allow agents to perceive changes in their environment:

```elixir
defmodule MyApp.DatabaseChangeSensor do
  use Jido.Sensor

  @impl true
  def start_monitoring(agent_pid, opts) do
    # Setup monitoring logic
    {:ok, monitor_ref}
  end
end
```

## Using Your Agent

```elixir
# Send a message to your agent
response = MyApp.GreeterAgent.send_message("hello")
IO.puts(response) # "Hello there! I've been greeted 1 times."
```

## Advanced Features

- **Distribution**: Agents can communicate across nodes
- **Self-adaptation**: Agents can modify their behavior based on feedback
- **Composition**: Build complex systems by combining simple agents

## Next Steps

- Explore the [Examples](/examples) section to see more complex agent systems
- Read the [Documentation](/docs) for detailed API references
- Check out the [Catalog](/catalog) of pre-built agents, actions, and skills

Happy building with Jido!
